"""Initial database setup

Revision ID: c9714b908433
Revises: 
Create Date: 2025-09-29 15:40:19.446324

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c9714b908433'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('Books', sa.Column('id', sa.Integer(), nullable=False))
    op.add_column('Books', sa.Column('title', sa.String(), nullable=False))
    op.add_column('Books', sa.Column('author', sa.String(), nullable=False))
    op.add_column('Books', sa.Column('isbn', sa.String(), nullable=False))
    op.add_column('Books', sa.Column('publication_year', sa.Integer(), nullable=False))
    op.add_column('Books', sa.Column('total_copies', sa.Integer(), nullable=False))
    op.add_column('Books', sa.Column('available_copies', sa.Integer(), nullable=False))
    op.drop_constraint(op.f('Books_ISBN_key'), 'Books', type_='unique')
    op.create_unique_constraint(None, 'Books', ['isbn'])
    op.drop_column('Books', 'Title')
    op.drop_column('Books', 'Author')
    op.drop_column('Books', 'ID')
    op.drop_column('Books', 'Total_Copies')
    op.drop_column('Books', 'Available_copies')
    op.drop_column('Books', 'ISBN')
    op.drop_column('Books', 'Publication_Year')
    op.add_column('Loan', sa.Column('id', sa.Integer(), nullable=False))
    op.add_column('Loan', sa.Column('book_id', sa.Integer(), nullable=False))
    op.drop_constraint(op.f('Loan_user_id_fkey'), 'Loan', type_='foreignkey')
    op.drop_constraint(op.f('Loan_Book_id_fkey'), 'Loan', type_='foreignkey')
    op.create_foreign_key(None, 'Loan', 'Books', ['book_id'], ['id'])
    op.create_foreign_key(None, 'Loan', 'Users', ['user_id'], ['id'])
    op.drop_column('Loan', 'ID')
    op.drop_column('Loan', 'Book_id')
    op.add_column('Users', sa.Column('id', sa.Integer(), nullable=False))
    op.add_column('Users', sa.Column('name', sa.String(), nullable=False))
    op.add_column('Users', sa.Column('email', sa.String(), nullable=False))
    op.drop_constraint(op.f('Users_Email_key'), 'Users', type_='unique')
    op.create_unique_constraint(None, 'Users', ['email'])
    op.drop_column('Users', 'ID')
    op.drop_column('Users', 'Name')
    op.drop_column('Users', 'Email')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('Users', sa.Column('Email', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('Users', sa.Column('Name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('Users', sa.Column('ID', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'Users', type_='unique')
    op.create_unique_constraint(op.f('Users_Email_key'), 'Users', ['Email'], postgresql_nulls_not_distinct=False)
    op.drop_column('Users', 'email')
    op.drop_column('Users', 'name')
    op.drop_column('Users', 'id')
    op.add_column('Loan', sa.Column('Book_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('Loan', sa.Column('ID', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'Loan', type_='foreignkey')
    op.drop_constraint(None, 'Loan', type_='foreignkey')
    op.create_foreign_key(op.f('Loan_Book_id_fkey'), 'Loan', 'Books', ['Book_id'], ['ID'])
    op.create_foreign_key(op.f('Loan_user_id_fkey'), 'Loan', 'Users', ['user_id'], ['ID'])
    op.drop_column('Loan', 'book_id')
    op.drop_column('Loan', 'id')
    op.add_column('Books', sa.Column('Publication_Year', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('Books', sa.Column('ISBN', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('Books', sa.Column('Available_copies', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('Books', sa.Column('Total_Copies', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('Books', sa.Column('ID', sa.INTEGER(), server_default=sa.text('nextval(\'"Books_ID_seq"\'::regclass)'), autoincrement=True, nullable=False))
    op.add_column('Books', sa.Column('Author', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('Books', sa.Column('Title', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'Books', type_='unique')
    op.create_unique_constraint(op.f('Books_ISBN_key'), 'Books', ['ISBN'], postgresql_nulls_not_distinct=False)
    op.drop_column('Books', 'available_copies')
    op.drop_column('Books', 'total_copies')
    op.drop_column('Books', 'publication_year')
    op.drop_column('Books', 'isbn')
    op.drop_column('Books', 'author')
    op.drop_column('Books', 'title')
    op.drop_column('Books', 'id')
    # ### end Alembic commands ###
